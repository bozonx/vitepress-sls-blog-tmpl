/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
 * —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π JSON —Ñ–∞–π–ª —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
 */

import fs from 'fs/promises'
import path from 'path'
import { google } from 'googleapis'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
 *
 * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VitePress
 * @returns {Promise<void>}
 */
export async function generatePopularPostsAtBuildTime(config) {
  const { userConfig } = config
  const analyticsConfig = userConfig.themeConfig?.analytics

  if (!analyticsConfig?.enabled) {
    console.log(
      'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤'
    )
    return
  }

  console.log('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await fetchAnalyticsStatsAtBuildTime(config)

    if (!stats || Object.keys(stats).length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
      return
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    const allPosts = await getAllPostsAtBuildTime(config)

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    const popularPosts = sortPostsByAnalyticsAtBuildTime(
      allPosts,
      stats,
      analyticsConfig.sortBy || 'pageviews',
      analyticsConfig.popularPostsCount || 10
    )

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const data = {
      generatedAt: new Date().toISOString(),
      source: analyticsConfig.type || 'unknown',
      totalPosts: allPosts.length,
      popularPostsCount: popularPosts.length,
      posts: popularPosts.map((post) => ({
        url: post.url,
        title: post.title,
        date: post.date,
        authorId: post.authorId,
        tags: post.tags,
        preview: post.preview,
        thumbnail: post.thumbnail,
        cover: post.cover,
        coverHeight: post.coverHeight,
        coverWidth: post.coverWidth,
        analytics: post.analyticsStats,
      })),
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—É–±–ª–∏—á–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const outputPath = path.join(config.outDir, 'popular-posts.json')
    await fs.writeFile(outputPath, JSON.stringify(data, null, 2), 'utf-8')

    console.log(`‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`)
    console.log(
      `üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${popularPosts.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ ${allPosts.length} –æ–±—â–∏—Ö`
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:', error)
  }
}

/** –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ */
async function fetchAnalyticsStatsAtBuildTime(config) {
  const { userConfig } = config
  const analyticsConfig = userConfig.themeConfig?.analytics

  switch (analyticsConfig.type) {
    case 'google':
      return await fetchGoogleAnalyticsAtBuildTime(analyticsConfig)
    case 'mock':
    default:
      return await generateMockAnalyticsAtBuildTime(config)
  }
}

/** –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Analytics –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ */
async function fetchGoogleAnalyticsAtBuildTime(analyticsConfig) {
  const gaConfig = analyticsConfig.google

  if (!gaConfig.enabled || !gaConfig.propertyId || !gaConfig.credentialsPath) {
    throw new Error('Google Analytics –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  }

  console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Analytics...')

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const credentials = JSON.parse(
    await fs.readFile(gaConfig.credentialsPath, 'utf-8')
  )

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è GA API
  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ['https://www.googleapis.com/auth/analytics.readonly'],
  })

  if (gaConfig.version === 'ga4') {
    // GA4 Data API
    const analyticsdata = google.analyticsdata({ version: 'v1beta', auth })
    const endDate = new Date()
    const startDate = new Date()
    startDate.setDate(startDate.getDate() - (gaConfig.dataPeriodDays || 30))

    const response = await analyticsdata.properties.runReport({
      property: `properties/${gaConfig.propertyId}`,
      requestBody: {
        dateRanges: [
          {
            startDate: startDate.toISOString().split('T')[0],
            endDate: endDate.toISOString().split('T')[0],
          },
        ],
        metrics: [
          { name: 'screenPageViews' },
          { name: 'totalUsers' },
          { name: 'averageSessionDuration' },
          { name: 'bounceRate' },
        ],
        dimensions: [{ name: 'pagePath' }],
        orderBys: [{ metric: { metricName: 'screenPageViews' }, desc: true }],
      },
    })

    return processGA4ResponseAtBuildTime(response.data)
  } else {
    // Universal Analytics Reporting API
    const analyticsreporting = google.analyticsreporting({
      version: 'v4',
      auth,
    })
    const endDate = new Date()
    const startDate = new Date()
    startDate.setDate(startDate.getDate() - (gaConfig.dataPeriodDays || 30))

    const response = await analyticsreporting.reports.batchGet({
      requestBody: {
        reportRequests: [
          {
            viewId: gaConfig.propertyId,
            dateRanges: [
              {
                startDate: startDate.toISOString().split('T')[0],
                endDate: endDate.toISOString().split('T')[0],
              },
            ],
            metrics: [
              { expression: 'ga:pageviews' },
              { expression: 'ga:uniquePageviews' },
              { expression: 'ga:avgTimeOnPage' },
              { expression: 'ga:bounceRate' },
            ],
            dimensions: [{ name: 'ga:pagePath' }],
            orderBys: [{ fieldName: 'ga:pageviews', sortOrder: 'DESCENDING' }],
          },
        ],
      },
    })

    return processGAUAResponseAtBuildTime(response.data)
  }
}

/** –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ */
async function generateMockAnalyticsAtBuildTime(config) {
  console.log('üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...')

  const posts = await getAllPostsAtBuildTime(config)
  const stats = {}

  posts.forEach((post, index) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∫–∏
    const baseViews = 100 + index * 50
    const views = baseViews + Math.floor(Math.random() * 100)

    stats[post.url] = {
      pageviews: views,
      uniquePageviews: Math.floor(views * 0.7),
      avgTimeOnPage: 120 + Math.floor(Math.random() * 180),
      bounceRate: 0.2 + Math.random() * 0.3,
    }
  })

  console.log(`üé≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${Object.keys(stats).length} –º–æ–∫–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`)
  return stats
}

/** –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ */
async function getAllPostsAtBuildTime(config) {
  const posts = []
  const locales = Object.keys(config.locales || { root: {} })

  for (const locale of locales) {
    try {
      const { loadPosts } = await import('../list-helpers/loadPosts.js')
      const localeDir = path.join(config.srcDir, locale)
      const localePosts = await loadPosts(localeDir)
      posts.push(...localePosts)
    } catch (error) {
      console.warn(
        `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª–∏ ${locale}:`,
        error.message
      )
    }
  }

  return posts
}

/** –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ */
function sortPostsByAnalyticsAtBuildTime(posts, stats, sortBy, limit) {
  return posts
    .map((post) => ({
      ...post,
      analyticsStats: stats[post.url] || {
        pageviews: 0,
        uniquePageviews: 0,
        avgTimeOnPage: 0,
        bounceRate: 1,
      },
    }))
    .sort((a, b) => {
      const aValue = a.analyticsStats[sortBy] || 0
      const bValue = b.analyticsStats[sortBy] || 0

      // –î–ª—è bounceRate —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
      if (sortBy === 'bounceRate') {
        return aValue - bValue
      }

      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)
      return bValue - aValue
    })
    .slice(0, limit)
}

/** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GA4 API –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ */
function processGA4ResponseAtBuildTime(responseData) {
  const stats = {}

  if (!responseData.rows || responseData.rows.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Google Analytics 4')
    return stats
  }

  responseData.rows.forEach((row) => {
    const pagePath = row.dimensionValues[0].value
    const metrics = row.metricValues

    stats[pagePath] = {
      pageviews: parseInt(metrics[0].value) || 0,
      uniquePageviews: parseInt(metrics[1].value) || 0,
      avgTimeOnPage: parseFloat(metrics[2].value) || 0,
      bounceRate: parseFloat(metrics[3].value) || 0,
    }
  })

  return stats
}

/** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Universal Analytics API –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ */
function processGAUAResponseAtBuildTime(responseData) {
  const stats = {}

  if (!responseData.reports || responseData.reports.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Google Analytics')
    return stats
  }

  const report = responseData.reports[0]
  const rows = report.data?.rows || []

  rows.forEach((row) => {
    const pagePath = row.dimensions[0]
    const metrics = row.metrics[0].values

    stats[pagePath] = {
      pageviews: parseInt(metrics[0]) || 0,
      uniquePageviews: parseInt(metrics[1]) || 0,
      avgTimeOnPage: parseFloat(metrics[2]) || 0,
      bounceRate: parseFloat(metrics[3]) || 0,
    }
  })

  return stats
}
