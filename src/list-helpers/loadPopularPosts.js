import fs from 'fs/promises'
import { google } from 'googleapis'

if (!global.gaCache) {
  global.gaCache = {}
}

// GA4 Data API v1beta
const GA_VERSION = 'v1beta'

export async function mergeWithAnalytics(localeIndex, posts, config) {
  const popularPostsCfg = config.site.themeConfig.popularPosts
  const gaCfg = config.site.themeConfig.googleAnalytics

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (
    !popularPostsCfg?.enabled ||
    !gaCfg?.propertyId ||
    !gaCfg?.credentialsPath
  ) {
    console.log('‚ö†Ô∏è Google Analytics –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω')
    return posts
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Analytics
    const stats = await fetchGoogleAnalytics(popularPostsCfg, gaCfg)

    if (!stats || Object.keys(stats).length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Analytics')
      return posts
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const postsWithStats = posts.map((post) => {
      const postPath = post.url || post.relativePath
      const analyticsData = stats[postPath] || {}

      return { ...post, analyticsStats: analyticsData }
    })

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${postsWithStats.length} –ø–æ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π`)

    return postsWithStats
  } catch (error) {
    console.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Analytics:',
      error.message
    )

    return posts
  }
}

async function fetchGoogleAnalytics(popularPostsCfg, gaCfg) {
  console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Analytics...')

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Service Account JSON —Ñ–∞–π–ª–∞
    if (!gaCfg.credentialsPath) {
      throw new Error(
        '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Service Account'
      )
    }

    const credentials = JSON.parse(
      await fs.readFile(gaCfg.credentialsPath, 'utf-8')
    )

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è GA4 Data API
    const auth = new google.auth.GoogleAuth({
      credentials,
      scopes: ['https://www.googleapis.com/auth/analytics.readonly'],
    })

    const analyticsdata = google.analyticsdata({ version: GA_VERSION, auth })
    const endDate = new Date()
    const startDate = new Date()
    startDate.setDate(startDate.getDate() - (gaCfg.dataPeriodDays || 30))

    const response = await analyticsdata.properties.runReport({
      property: `properties/${gaCfg.propertyId}`,
      requestBody: {
        dateRanges: [
          {
            startDate: startDate.toISOString().split('T')[0],
            endDate: endDate.toISOString().split('T')[0],
          },
        ],
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è GA4
        metrics: [
          { name: 'screenPageViews' }, // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü
          { name: 'totalUsers' }, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          { name: 'averageSessionDuration' }, // –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
          { name: 'bounceRate' }, // –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–æ–≤
        ],
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è GA4
        dimensions: [{ name: 'pagePath' }],
        orderBys: [{ metric: { metricName: 'screenPageViews' }, desc: true }],
        limit: 1000, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      },
    })

    console.log(response.data)

    const stats = {}

    if (!response.data.rows || response.data.rows.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Google Analytics 4')
      return stats
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response.data.rows.forEach((row) => {
      const pagePath = row.dimensionValues[0].value
      const metrics = row.metricValues

      // –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ GA4 –Ω–∞ –Ω–∞—à–∏ –ø–æ–ª—è
      stats[pagePath] = {
        pageviews: parseInt(metrics[0].value) || 0,
        uniquePageviews: parseInt(metrics[1].value) || 0,
        avgTimeOnPage: parseFloat(metrics[2].value) || 0,
        bounceRate: parseFloat(metrics[3].value) || 0,
      }
    })

    console.log(
      `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Object.keys(stats).length} –∑–∞–ø–∏—Å–µ–π –∏–∑ Google Analytics`
    )
    return stats
  } catch (error) {
    console.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Analytics API:',
      error.message
    )

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (error.code === 'ENOENT') {
      console.error(
        '‚ùå –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:',
        gaCfg.credentialsPath
      )
    } else if (error.code === 403) {
      console.error(
        '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google Analytics. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ propertyId'
      )
    } else if (error.code === 400) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Google Analytics API')
    }

    return {}
  }
}
