import fs from 'fs'
import path from 'path'
import { generateRssFeed } from './generateRssFeed.js'
import { validateRssConfig } from './rssValidator.js'

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RSS –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ó–∞–ø—É—Å–∫: node
 * src/page-helpers/test-rss.js
 */

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const testConfig = {
  site: {
    locales: {
      en: {
        title: 'Test Blog',
        description: 'A test blog for RSS validation',
        themeConfig: { footer: { copyright: '¬© 2024 Test Blog' } },
      },
      ru: {
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RSS',
        themeConfig: { footer: { copyright: '¬© 2024 –¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥' } },
      },
    },
  },
  userConfig: {
    hostname: 'https://example.com',
    themeConfig: { sidebarLogoSrc: '/img/logo.png' },
  },
  outDir: './test-output',
}

/** –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ */
function testConfigValidation() {
  console.log('Testing configuration validation...')

  const isValid = validateRssConfig(testConfig)
  console.log('Configuration validation:', isValid ? 'PASSED' : 'FAILED')

  return isValid
}

/** –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é RSS feed */
async function testRssGeneration() {
  console.log('Testing RSS feed generation...')

  try {
    await generateRssFeed(testConfig)
    console.log('RSS generation: PASSED')
    return true
  } catch (error) {
    console.error('RSS generation: FAILED', error.message)
    return false
  }
}

/** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã */
function checkGeneratedFiles() {
  console.log('Checking generated files...')

  const expectedFiles = [
    'feed-en.rss',
    'feed-en.atom',
    'feed-en.json',
    'feed-ru.rss',
    'feed-ru.atom',
    'feed-ru.json',
  ]

  let allFilesExist = true

  for (const file of expectedFiles) {
    const filePath = path.join(testConfig.outDir, file)
    const exists = fs.existsSync(filePath)
    console.log(`${file}: ${exists ? 'EXISTS' : 'MISSING'}`)

    if (exists) {
      const stats = fs.statSync(filePath)
      console.log(`  Size: ${stats.size} bytes`)
    }

    if (!exists) allFilesExist = false
  }

  return allFilesExist
}

/** –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
async function runTests() {
  console.log('=== RSS Feed Testing ===\n')

  const configTest = testConfigValidation()
  console.log()

  if (configTest) {
    const generationTest = await testRssGeneration()
    console.log()

    if (generationTest) {
      const filesTest = checkGeneratedFiles()
      console.log()

      console.log('=== Test Results ===')
      console.log(`Configuration: ${configTest ? 'PASSED' : 'FAILED'}`)
      console.log(`Generation: ${generationTest ? 'PASSED' : 'FAILED'}`)
      console.log(`Files: ${filesTest ? 'PASSED' : 'FAILED'}`)

      if (configTest && generationTest && filesTest) {
        console.log(
          '\nüéâ All tests passed! RSS feed generation is working correctly.'
        )
      } else {
        console.log('\n‚ùå Some tests failed. Please check the output above.')
      }
    }
  } else {
    console.log(
      '‚ùå Configuration validation failed. Cannot proceed with generation test.'
    )
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests().catch(console.error)
}

export { runTests, testConfig }
